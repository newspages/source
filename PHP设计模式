设计模式不仅代表着更快开发健壮软件的有用方法，而且还提供了以友好的术语封装大型理念的方法。例如，你可以说您正在编写一个提供松散耦合的消息
传递系统，也可以说你正在编写名称为 观察者 的模式。

用较小的示例展示模式的价值是非常困难的。这往往有些大材小用的意味，因为模式实际上是在大型代码库中发挥作用的。本文不展示大型应用程序，所以
你需要思索的是在您自己的大型应用程序中应用示例原理的方法 -- 而不是本文演示的代码本身。这不是说您不应该在小应用程序中使用模式。很多良好的
应用程序都是以小的应用程序为起点，逐渐发展到大型应用程序。

PHP常用的五种设计模式：
1.工厂模式
最初在设计模式一书中，许多设计模式都鼓励使用 松散耦合。要理解这个概念，让我们最好谈一下许多开发人员从事大系统其它部分--您曾认为完全不相关
的部分（代码）中也可能出现级联破坏。

该问题在于 紧密耦合（高耦合）。系统某个部分中的函数和类严重依赖于系统中的其他部分中的函数和类的行为和结构。您需要一组模式，使用这些类能够
相互通信，但不希望将它们紧密绑定在一起，以避免出现级联锁。

在大型系统中，许多代码依赖于少数的几个关键类。需要更改这些类时，可能会出现困难。工厂模式是一种类，它具有为您创建对象的某些方法。您可以使用
工厂类创建对象，而不直接使用new。这样，如果您想要更改所创建的对象类型，只需要更改工厂即可。使用该工厂的多有代码会自动更改。

代码清单1.Factory1.php
<?php
inteface IUser
{
  function getName();
}

class User implements IUser
{
  public function __construct($id)
  {
    // code
  }
  
  public function getName()
  {
    return 'username';
  }
}

class UserFactory
{
  public static function Create($id)
  {
    return new User($id);
  }
}

$uo = UserFactory::Create(1);
echo $uo->getName();

?>








