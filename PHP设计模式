设计模式不仅代表着更快开发健壮软件的有用方法，而且还提供了以友好的术语封装大型理念的方法。例如，你可以说您正在编写一个提供松散耦合的消息
传递系统，也可以说你正在编写名称为 观察者 的模式。

用较小的示例展示模式的价值是非常困难的。这往往有些大材小用的意味，因为模式实际上是在大型代码库中发挥作用的。本文不展示大型应用程序，所以
你需要思索的是在您自己的大型应用程序中应用示例原理的方法 -- 而不是本文演示的代码本身。这不是说您不应该在小应用程序中使用模式。很多良好的
应用程序都是以小的应用程序为起点，逐渐发展到大型应用程序。

PHP常用的五种设计模式：
1.工厂模式
最初在设计模式一书中，许多设计模式都鼓励使用 松散耦合。要理解这个概念，让我们最好谈一下许多开发人员从事大系统其它部分--您曾认为完全不相关
的部分（代码）中也可能出现级联破坏。

该问题在于 紧密耦合（高耦合）。系统某个部分中的函数和类严重依赖于系统中的其他部分中的函数和类的行为和结构。您需要一组模式，使用这些类能够
相互通信，但不希望将它们紧密绑定在一起，以避免出现级联锁。

在大型系统中，许多代码依赖于少数的几个关键类。需要更改这些类时，可能会出现困难。工厂模式是一种类，它具有为您创建对象的某些方法。您可以使用
工厂类创建对象，而不直接使用new。这样，如果您想要更改所创建的对象类型，只需要更改工厂即可。使用该工厂的多有代码会自动更改。

代码清单1.Factory1.php
<?php
inteface IUser
{
  function getName();
}

class User implements IUser
{
  public function __construct($id)
  {
    // code
  }
  
  public function getName()
  {
    return 'username';
  }
}

class UserFactory
{
  public static function Create($id)
  {
    return new User($id);
  }
}

$uo = UserFactory::Create(1);
echo $uo->getName();

?>

IUser 接口定义用户对象应执行什么操作。IUser 的实现称为 User，UserFactory 工厂类则创建 IUser 对象。此关系可以用图 1 中的 UML 表示。
图 1. 工厂类及其相关 IUser 接口和用户类
工厂类及其相关 IUser 接口和用户类
如果您使用 php 解释器在命令行上运行此代码，将得到如下结果：

% php factory1.php 
Jack
%
测试代码会向工厂请求 User 对象，并输出 getName 方法的结果。


2.单例模式（单元素模式）
单例模式的要点有三个：

一是某个类只能有一个实例；
二是它必须自行创建这个实例；
三是它必须自行向整个系统提供这个实例。
为什么要使用PHP单例模式
1. php的应用主要在于数据库应用, 一个应用中会存在大量的数据库操作, 在使用面向对象的方式开发时, 如果使用单例模式, 则可以避免大量的new 操作消耗的资源,还可以减少数据库连接这样就不容易出现 too many connections情况。
2. 如果系统中需要有一个类来全局控制某些配置信息, 那么使用单例模式可以很方便的实现. 这个可以参看zend Framework的FrontController部分。
3. 在一次页面请求中, 便于进行调试, 因为所有的代码(例如数据库操作类db)都集中在一个类中, 我们可以在类中设置钩子, 输出日志，从而避免到处var_dump, echo。

单元素模式
某些应用程序资源是独占的，因为有且只有一个此类型的资源。例如，通过数据库句柄到数据库的连接是独占的。您希望在应用程序中共享数据库句柄，因为在保持连接打开或关闭时，它是一种开销，在获取单个页面的过程中更是如此。
单元素模式可以满足此要求。如果应用程序每次包含且仅包含一个对象，那么这个对象就是一个单元素（Singleton）。清单 3 中的代码显示了 PHP V5 中的一个数据库连接单元素。
清单 3. Singleton.php
<?php
require_once("DB.php");
 
class DatabaseConnection
{
  public static function get()
  {
    static $db = null;
    if ( $db == null )
      $db = new DatabaseConnection();
    return $db;
  }
 
  private $_handle = null;
 
  private function __construct()
  {
    $dsn = 'mysql://root:password@localhost/photos';
    $this->_handle =& DB::Connect( $dsn, array() );
  }
   
  public function handle()
  {
    return $this->_handle;
  }
}
 
print( "Handle = ".DatabaseConnection::get()->handle()."\n" );
print( "Handle = ".DatabaseConnection::get()->handle()."\n" );
?>
此代码显示名为 DatabaseConnection 的单个类。您不能创建自已的 DatabaseConnection，因为构造函数是专用的。但使用静态 get 方法，您可以获得且仅获得一个 DatabaseConnection 对象。此代码的 UML 如图 3 所示。
图 3. 数据库连接单元素
数据库连接单元素
在两次调用间，handle 方法返回的数据库句柄是相同的，这就是最好的证明。您可以在命令行中运行代码来观察这一点。

% php singleton.php 
Handle = Object id #3
Handle = Object id #3
%
返回的两个句柄是同一对象。如果您在整个应用程序中使用数据库连接单元素，那么就可以在任何地方重用同一句柄。
您可以使用全局变量存储数据库句柄，但是，该方法仅适用于较小的应用程序。在较大的应用程序中，应避免使用全局变量，并使用对象和方法访问资源。








